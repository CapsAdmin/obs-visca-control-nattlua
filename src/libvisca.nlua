local bit = require("bit")
import<|"./obslua.nlua"|>
local obs = obslua
local Visca = {}
Visca.default_port = 52381
Visca.default_camera_nr = 1
Visca.debug = false
Visca.modes = {generic = 0, ptzoptics = 1}
-- Payload type
-- Stores the value (Byte 0 and Byte 1) of the following table on the payload division
Visca.payload_types = {
	visca_command = 0x0100, -- VISCA command, Stores the VISCA command.
	visca_inquiry = 0x0110, -- VISCA inquiry, Stores the VISCA inquiry.
	visca_reply = 0x0111, -- VISCA reply, Stores the reply for the VISCA command and VISCA inquiry,
	-- or VISCA device setting command.
	visca_setting = 0x0120, -- VISCA device setting command, Stores the VISCA device setting command.
	control_command = 0x0200, -- Control command, Stores the control command.
	control_reply = 0x0201, -- Control reply, Stores the reply for the control command.
}
Visca.payload_type_names = {
	[Visca.payload_types.visca_command] = "VISCA Command",
	[Visca.payload_types.visca_inquiry] = "VISCA Inquiry",
	[Visca.payload_types.visca_reply] = "VISCA Reply",
	[Visca.payload_types.visca_setting] = "VISCA Device Setting Command",
	[Visca.payload_types.control_command] = "Control Comand",
	[Visca.payload_types.control_reply] = "Control Reply",
}
Visca.packet_consts = {
	req_addr_base = 0x80,
	command = 0x01,
	inquiry = 0x09,
	reply_ack = 0x40,
	reply_completion = 0x50,
	reply_error = 0x60,
	reply = 0x90,
	terminator = 0xFF,
}
Visca.error_type_names = {
	[0x01] = "Message length error",
	[0x02] = "Syntax error",
	[0x03] = "Command buffer full",
	[0x04] = "Command canceled",
	[0x05] = "No socket", -- To be cancelled
	[0x41] = "Command not executable",
}
Visca.categories = {
	interface = 0x00,
	camera = 0x04,
	exposure = 0x04,
	focus = 0x04,
	zoom = 0x04,
	exposure_ext = 0x05,
	pan_tilter = 0x06,
	camera_ext = 0x07,
}
Visca.category_names = {
	[Visca.categories.interface] = "Interface",
	[Visca.categories.camera] = "Exposure/Focus/Camera/Zoom",
	[Visca.categories.exposure] = "Exposure/Focus/Camera/Zoom",
	[Visca.categories.focus] = "Exposure/Focus/Camera/Zoom",
	[Visca.categories.zoom] = "Exposure/Focus/Camera/Zoom",
	[Visca.categories.exposure_ext] = "Exposure",
	[Visca.categories.pan_tilter] = "Pan/Tilt",
	[Visca.categories.camera_ext] = "Exposure/Camera",
}
Visca.commands = {
	power = 0x00,
	pantilt_drive = 0x01,
	pantilt_absolute = 0x02,
	pantilt_home = 0x04,
	pantilt_reset = 0x05,
	zoom = 0x07,
	focus = 0x08,
	exposure_gain = 0x0C,
	preset = 0x3F,
	zoom_direct = 0x47,
	focus_direct = 0x48,
	exposure_auto = 0x49,
	exposure_shutter_direct = 0x4A,
	exposure_iris_direct = 0x4B,
	exposure_gain_direct = 0x4B,
}
Visca.command_names = {
	[Visca.commands.power] = "Power",
	[Visca.commands.pantilt_drive] = "Pan/Tilt (Direction)",
	[Visca.commands.pantilt_absolute] = "Pan/Tilt (Absolute)",
	[Visca.commands.pantilt_home] = "Pan/Tilt (Home)",
	[Visca.commands.pantilt_reset] = "Pan/Tilt (Reset)",
	[Visca.commands.zoom] = "Zoom",
	[Visca.commands.focus] = "Focus",
	[Visca.commands.exposure_gain] = "Gain",
	[Visca.commands.preset] = "Preset",
	[Visca.commands.zoom_direct] = "Zoom (Direct)",
	[Visca.commands.focus_direct] = "Focus (Direct)",
	[Visca.commands.exposure_auto] = "Auto Exposure",
	[Visca.commands.exposure_iris_direct] = "Iris Absolute",
	[Visca.commands.exposure_shutter_direct] = "Shutter Absolute",
	[Visca.commands.exposure_gain_direct] = "Gain Absolute",
}
Visca.command_arguments = {
	preset_recall = 0x02,
	power_on = 0x02,
	power_standby = 0x03,
	focus_stop = 0x00,
	focus_far_std = 0x02,
	focus_near_std = 0x03,
	focus_far_var = 0x20,
	focus_near_var = 0x30,
}
Visca.inquiry_commands = {
	software_version = 0x02,
	pantilt_position = 0x12,
	zoom_position = 0x47,
}
Visca.inquiry_command_names = {
	[Visca.inquiry_commands.software_version] = "Software Version",
	[Visca.inquiry_commands.pantilt_position] = "Pan/Tilt (Position)",
	[Visca.inquiry_commands.zoom_position] = "Zoom (Position)",
}

local function ca_key(command: ref number, argument: ref number)
	return bit.lshift(command or 0, 8) + (argument or 0)
end

Visca.command_argument_names = {
	[ca_key(Visca.commands.preset, Visca.command_arguments.preset_recall)] = "Absolute Position (Preset)",
	[ca_key(Visca.commands.power, Visca.command_arguments.power_on)] = "On",
	[ca_key(Visca.commands.power, Visca.command_arguments.power_standby)] = "Standby",
	[ca_key(Visca.commands.focus, Visca.command_arguments.focus_stop)] = "Stop",
	[ca_key(Visca.commands.focus, Visca.command_arguments.focus_far_std)] = "Far (standard speed)",
	[ca_key(Visca.commands.focus, Visca.command_arguments.focus_near_std)] = "Near (standard speed)",
	[ca_key(Visca.commands.focus, Visca.command_arguments.focus_far_var)] = "Far (variable speed)",
	[ca_key(Visca.commands.focus, Visca.command_arguments.focus_near_var)] = "Near (variable speed)",
}
Visca.Focus_modes = {
	auto = 0x3802,
	manual = 0x3803,
	toggle = 0x3810,
	one_push_trigger = 0x1801,
	infinity = 0x1802,
}
Visca.PanTilt_directions = {
	upleft = 0x0101,
	upright = 0x0201,
	up = 0x0301,
	downleft = 0x0102,
	downright = 0x0202,
	down = 0x0302,
	left = 0x0103,
	right = 0x0203,
	stop = 0x0303,
}
Visca.Zoom_subcommand = {
	stop = 0x00,
	tele_standard = 0x02,
	wide_standard = 0x03,
	tele_variable = 0x20,
	wide_variable = 0x30,
}
Visca.limits = {
	PAN_MIN_SPEED = 0x01,
	PAN_MAX_SPEED = 0x18,
	FOCUS_MIN_SPEED = 0x00,
	FOCUS_MAX_SPEED = 0x07,
	PAN_MIN_VALUE = 0x00000,
	PAN_MAX_VALUE = 0xFFFFF,
	TILT_MIN_VALUE = 0x0000,
	TILT_MAX_VALUE = 0xFFFF,
	TILT_MIN_SPEED = 0x01,
	TILT_MAX_SPEED = 0x18,
	ZOOM_MIN_SPEED = 0x00,
	ZOOM_MAX_SPEED = 0x07,
	ZOOM_MIN_VALUE = 0x0000,
	ZOOM_MAX_VALUE = 0x4000,
}
Visca.CameraActions = {
	Cam_Focus_Mode = function(mode: Visca.Focus_modes[keysof<|Visca.Focus_modes|>])
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.focus,
			bit.band(bit.rshift(mode, 8), 0xFF),
			bit.band(mode, 0xFF),
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Focus_Stop = function()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.focus,
			Visca.commands.focus,
			Visca.command_arguments.focus_stop,
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Focus_Far = function(speed: nil | (Visca.limits.FOCUS_MIN_SPEED .. Visca.limits.FOCUS_MAX_SPEED))
		speed = speed or Visca.command_arguments.focus_far_std
		speed = math.min(math.max(speed, Visca.limits.FOCUS_MIN_SPEED), Visca.limits.FOCUS_MAX_SPEED)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.focus,
			Visca.commands.focus,
			bit.bor(Visca.command_arguments.focus_far_var, bit.band(speed, 0x07)),
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Focus_Near = function(speed: nil | (Visca.limits.FOCUS_MIN_SPEED .. Visca.limits.FOCUS_MAX_SPEED))
		speed = speed or Visca.command_arguments.focus_near_std
		speed = math.min(math.max(speed, Visca.limits.FOCUS_MIN_SPEED), Visca.limits.FOCUS_MAX_SPEED)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.focus,
			Visca.commands.focus,
			bit.bor(Visca.command_arguments.focus_near_var, bit.band(speed, 0x07)),
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Power = function(on: boolean)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.power,
			on and
			Visca.command_arguments.power_on or
			Visca.command_arguments.power_standby,
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Preset_Recall = function(preset: 0 .. 127)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.preset,
			Visca.command_arguments.preset_recall,
			bit.band(preset, 0x7F), -- Preset Number(=0 to 127)
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_PanTilt = function(
		direction: Visca.PanTilt_directions[keysof<|Visca.PanTilt_directions|>],
		pan_speed: nil | (Visca.limits.PAN_MIN_SPEED .. Visca.limits.PAN_MAX_SPEED),
		tilt_speed: nil | (Visca.limits.TILT_MIN_SPEED .. Visca.limits.TILT_MAX_SPEED)
	)
		pan_speed = math.min(math.max(pan_speed or 1, Visca.limits.PAN_MIN_SPEED), Visca.limits.PAN_MAX_SPEED)
		tilt_speed = math.min(math.max(tilt_speed or 1, Visca.limits.TILT_MIN_SPEED), Visca.limits.TILT_MAX_SPEED)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.pan_tilter,
			Visca.commands.pantilt_drive,
			bit.band(pan_speed, 0x1F), -- lowest 5 bits are only relevant
			bit.band(tilt_speed, 0x1F), -- lowest 5 bits are only relevant
			bit.band(bit.rshift(direction, 8), 0xFF),
			bit.band(direction, 0xFF),
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_PanTilt_Home = function(
		speed: nil | (Visca.limits.PAN_MIN_SPEED .. Visca.limits.PAN_MAX_SPEED),
		pan: nil | (Visca.limits.PAN_MIN_VALUE .. Visca.limits.PAN_MAX_VALUE),
		tilt: nil | (Visca.limits.TILT_MIN_SPEED .. Visca.limits.TILT_MAX_SPEED)
	)
		speed = math.min(math.max(speed or 1, Visca.limits.PAN_MIN_SPEED), Visca.limits.PAN_MAX_SPEED)
		pan = math.min(math.max(pan or 1, Visca.limits.PAN_MIN_VALUE), Visca.limits.PAN_MAX_VALUE)
		tilt = math.min(math.max(tilt or 1, Visca.limits.TILT_MIN_VALUE), Visca.limits.TILT_MAX_VALUE)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.pan_tilter,
			Visca.commands.pantilt_absolute,
			speed,
			0x00, -- According to Sony spec it's always zero. Does this set tilt speed?
			bit.band(bit.rshift(pan, 16), 0x0F),
			bit.band(bit.rshift(pan, 12), 0x0F),
			bit.band(bit.rshift(pan, 8), 0x0F),
			bit.band(bit.rshift(pan, 4), 0x0F),
			bit.band(pan, 0x0F),
			bit.band(bit.rshift(tilt, 12), 0x0F),
			bit.band(bit.rshift(tilt, 8), 0x0F),
			bit.band(bit.rshift(tilt, 4), 0x0F),
			bit.band(tilt, 0x0F),
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_PanTilt_Home = function()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.pan_tilter,
			Visca.commands.pantilt_home,
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_PanTilt_Reset = function()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.pan_tilter,
			Visca.commands.pantilt_reset,
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Pantilt_Position_Inquiry = function()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_inquiry
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.inquiry,
			Visca.categories.pan_tilter,
			Visca.inquiry_commands.pantilt_position,
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Zoom_Stop = function()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.zoom,
			Visca.Zoom_subcommand.stop,
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Zoom_Tele = function(speed: nil | (Visca.limits.ZOOM_MIN_SPEED .. Visca.limits.ZOOM_MAX_SPEED))
		speed = speed or Visca.Zoom_subcommand.tele_standard
		speed = math.min(math.max(speed, Visca.limits.ZOOM_MIN_SPEED), Visca.limits.ZOOM_MAX_SPEED)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.zoom,
			bit.bor(Visca.Zoom_subcommand.tele_variable, bit.band(speed, 0x07)),
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Zoom_Wide = function(speed: nil | (Visca.limits.ZOOM_MIN_SPEED .. Visca.limits.ZOOM_MAX_SPEED))
		speed = speed or Visca.Zoom_subcommand.wide_standard
		speed = math.min(math.max(speed, Visca.limits.ZOOM_MIN_SPEED), Visca.limits.ZOOM_MAX_SPEED)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.zoom,
			bit.bor(Visca.Zoom_subcommand.wide_variable, bit.band(speed, 0x07)),
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Zoom_To = function(zoom: nil | (Visca.limits.ZOOM_MIN_VALUE .. Visca.limits.ZOOM_MAX_VALUE))
		zoom = zoom or 0
		zoom = math.min(math.max(zoom, Visca.limits.ZOOM_MIN_VALUE), Visca.limits.ZOOM_MAX_VALUE)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.zoom_direct,
			bit.band(bit.rshift(zoom, 12), 0x0F),
			bit.band(bit.rshift(zoom, 8), 0x0F),
			bit.band(bit.rshift(zoom, 4), 0x0F),
			bit.band(zoom, 0x0F),
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Zoom_Position_Inquiry = function()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_inquiry
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.inquiry,
			Visca.categories.camera,
			Visca.inquiry_commands.zoom_position,
			Visca.packet_consts.terminator,
		}
		return msg
	end,
	Cam_Software_Version_Inquiry = function()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_inquiry
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.inquiry,
			Visca.categories.interface,
			Visca.inquiry_commands.software_version,
			Visca.packet_consts.terminator,
		}
		return msg
	end,
}

do
	-- A Visca message is binary data with a message header (8 bytes) and payload (1 to 16 bytes).
	-- mode=generic uses this header, mode=PTZoptics eliminates this header
	--
	-- Byte:                      0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
	-- Payload type (byte 0-1):   |
	-- Payload length (byte 2-3):       |
	-- Sequence number (byte 4-7):            |
	-- Payload (byte 8 - max 23):                         |
	--
	-- The wire format is big-endian (LSB first)
	type PayloadBytes = {[1 .. 2] = number, [3 .. 24] = nil | number}

	do
		local PayloadCommand = {}
		PayloadCommand.__index = PayloadCommand
		type PayloadCommand.@Self = {
			command_inquiry = number,
			category = number,
			command = number,
			arguments = List<|number|>,
		}

		function Visca.PayloadCommand()
			return setmetatable(
				{
					command_inquiry = 0,
					category = 0,
					command = 0,
					arguments = {},
				},
				PayloadCommand
			)
		end

		function PayloadCommand:from_payload(payload: PayloadBytes)
			self.command_inquiry = payload[2]
			self.category = payload[3] or 0
			self.command = payload[4] or 0

			for i = 5, #payload do
				if not ((i == #payload) and (payload[i] == Visca.packet_consts.terminator)) then
					table.insert(self.arguments, payload[i])
				end
			end

			return self
		end

		function PayloadCommand:is_command()
			return self.command_inquiry == Visca.packet_consts.command
		end

		function PayloadCommand:is_inquiry()
			return self.command_inquiry == Visca.packet_consts.inquiry
		end

		function PayloadCommand:is_reply()
			return self.command_inquiry == Visca.packet_consts.reply
		end

		function PayloadCommand:as_string()
			local args = "- (no arguments)"

			if #self.arguments > 0 then
				local descr = Visca.command_argument_names[ca_key(self.command, self.arguments[1] as number)]
				local str_a = {}

				for i = descr and 2 or 1, #self.arguments do
					table.insert(str_a, string.format("%02X", self.arguments[i]))
				end

				args = (descr or "arguments") .. " " .. table.concat(str_a, " ")
			end

			if self:is_command() then
				return string.format(
					"Command on %s: %s, %s",
					Visca.category_names[self.category],
					Visca.command_names[self.command] or
						string.format("Unknown (0x%0x)", self.command),
					args
				)
			elseif self:is_inquiry() then
				return string.format(
					"Inquiry on %s: %s, %s",
					Visca.category_names[self.category],
					Visca.command_names[self.command] or
						string.format("Unknown (0x%0x)", self.command),
					args
				)
			else
				return "Unknown"
			end
		end
	end

	do
		local PayloadReply = {}
		PayloadReply.__index = PayloadReply
		type PayloadReply.@Self = {
			reply_type = number,
			socket_number = number,
			error_type = number,
			arguments = List<|number|>,
		}

		function Visca.PayloadReply()
			return setmetatable(
				{
					reply_type = 0,
					socket_number = 0,
					error_type = 0,
					arguments = {},
				},
				PayloadReply
			)
		end

		function PayloadReply:from_payload(payload: PayloadBytes)
			self.reply_type = bit.band(payload[2], 0xF0)
			self.socket_number = bit.band(payload[2], 0x0F)

			if self:is_error() then
				self.error_type = payload[3] or 0
			else
				for i = 3, #payload do
					if not ((i == #payload) and (payload[i] == Visca.packet_consts.terminator)) then
						table.insert(self.arguments, payload[i])
					end
				end
			end

			return self
		end

		function PayloadReply:is_ack()
			return self.reply_type == Visca.packet_consts.reply_ack
		end

		function PayloadReply:is_completion()
			return self.reply_type == Visca.packet_consts.reply_completion
		end

		function PayloadReply:is_error()
			return self.reply_type == Visca.packet_consts.reply_error
		end

        function PayloadReply:get_inquiry_data_for(inquiry_payload: PayloadBytes)
            local _,_,category,inquiry_command = unpack(inquiry_payload)
            local data = {}

            if category == Visca.categories.interface then
                if inquiry_command == Visca.inquiry_commands.software_version then
                    -- TODO: parse Visca.inquiry_commands.software_version
                    data = {
                        vendor_id   = bit.lshift(self.arguments[1], 8) + self.arguments[2],
                        model_code  = bit.lshift(self.arguments[3], 8) + self.arguments[4],
                        rom_version = bit.lshift(self.arguments[5], 8) + self.arguments[6],
                    }
                end
            elseif category == Visca.categories.camera then
                if inquiry_command == Visca.inquiry_commands.zoom_position then
                    data = {
                        position = bit.lshift(bit.band(self.arguments[1], 0x0F), 12) +
                                   bit.lshift(bit.band(self.arguments[2], 0x0F), 8) +
                                   bit.lshift(bit.band(self.arguments[3], 0x0F), 4) +
                                   bit.band(self.arguments[4], 0x0F),
                    }
                end
            elseif category == Visca.categories.pan_tilter then
                if inquiry_command == Visca.inquiry_commands.pantilt_position then
                    data = {
                        pan  = bit.lshift(bit.band(self.arguments[1], 0x0F), 12) +
                               bit.lshift(bit.band(self.arguments[3], 0x0F), 4) +
                               bit.lshift(bit.band(self.arguments[2], 0x0F), 8) +
                               bit.band(self.arguments[4], 0x0F),
                        tilt = bit.lshift(bit.band(self.arguments[5], 0x0F), 12) +
                               bit.lshift(bit.band(self.arguments[6], 0x0F), 8) +
                               bit.lshift(bit.band(self.arguments[7], 0x0F), 4) +
                               bit.band(self.arguments[8], 0x0F)
                    }
                end
            end

            return data
        end

		function PayloadReply:as_string()
			if self:is_ack() then
				return "Acknowledge"
			elseif self:is_completion() then
				if #self.arguments > 0 then
					local str_a = {}

					for b = 1, #self.arguments do
						table.insert(str_a, string.format("%02X", self.arguments[b]))
					end

					return "Completion, inquiry: " .. table.concat(str_a, " ")
				else
					return "Completion, command"
				end
			elseif self:is_error() then
				return string.format(
					"Error on socket %d: %s (%02x)",
					self.socket_number,
					Visca.error_type_names[self.error_type] or "Unknown",
					self.error_type
				)
			else
				return "Unknown"
			end
		end
	end

	local Message = {}
	Message.__index = Message
	type Message.@Self = {
		payload_type = number,
		payload_size = number,
		seq_nr = number,
		payload = PayloadBytes, -- as Payload structure
		message = {command = nil | Visca.PayloadCommand(), reply = nil | Visca.PayloadReply()},
	}

	function Visca.Message()
		return setmetatable(
			{
				payload_type = 0x0000,
				payload_size = 0x0000,
				seq_nr = 0x00000000,
				payload = {0, 0},
				message = {
					command = nil,
					reply = nil,
				},
			},
			Message
		)
	end

	local function lsb(v: number)
		return bit.band(v, 0x00FF)
	end

	local function msb(v: number)
		return bit.rshift(v, 8)
	end

	function Message:from_data(data: string)
		local message_length = #data  as 1 .. 24

		if message_length < 2 then return self end

		if
			(
				string.byte(data, 1) == 0x01 or
				string.byte(data, 1) == 0x02
			)
			and
			message_length >= 9 and
			message_length <= 24
		then
			self.payload_type = string.byte(data, 1) * 256 + string.byte(data, 2)
			self.payload_size = string.byte(data, 3) * 256 + string.byte(data, 4)
			self.seq_nr = string.byte(data, 5) * 2 ^ 24 + string.byte(data, 6) * 2 ^ 16 + string.byte(data, 7) * 2 ^ 8 + string.byte(data, 8)

			for b = 1, self.payload_size do
				if 8 + b <= message_length then
					table.insert(self.payload, string.byte(data, 8 + b))
				else
					if self.payload_size > #self.payload then
						self.payload_size = #self.payload
					end

					print(
						string.format(
							"Ignoring byte %d, payload index beyond message length %d",
							8 + b,
							message_length
						)
					)
				end
			end
		elseif message_length >= 1 and message_length <= 16 then
			self.payload_size = message_length

			for b = 1, message_length do
				table.insert(self.payload, string.byte(data, b))
			end
		end

		if (bit.band(self.payload[1] or 0, 0xF0) == 0x80) then
			-- command or inquiry
			self.message.command = Visca.PayloadCommand():from_payload(self.payload)
		elseif (bit.band(self.payload[1] or 0, 0xF0) == 0x90) then
			-- reply
			self.message.reply = Visca.PayloadReply():from_payload(self.payload)
		end

		return self
	end

	function Message:to_data(mode: nil | Visca.modes[keysof<|Visca.modes|>])
		mode = mode or Visca.modes.generic
		local payload_size = (self.payload_size > 0) and self.payload_size or #self.payload
		local data = {}

		if mode == Visca.modes.generic then
			data = {
				msb(self.payload_type),
				lsb(self.payload_type),
				msb(payload_size),
				lsb(payload_size),
				bit.band(bit.rshift(self.seq_nr, 24), 0xFF),
				bit.band(bit.rshift(self.seq_nr, 16), 0xFF),
				bit.band(bit.rshift(self.seq_nr, 8), 0xFF),
				bit.band(self.seq_nr, 0xFF),
			}
		end

		for b = 1, payload_size do
			table.insert(data, self.payload[b])
		end

		local str_a = {}

		for _, v in ipairs(data) do
			table.insert(str_a, string.char(v))
		end

		return table.concat(str_a)
	end

	function Message:as_string(mode: nil | Visca.modes[keysof<|Visca.modes|>])
		mode = mode or Visca.modes.generic
		local bin_str = self.to_data(mode)
		local str_a = {}

		for b = 1, #bin_str do
			table.insert(str_a, string.format("%02X", string.byte(bin_str, b)))
		end

		return table.concat(str_a, " ")
	end

	function Message:dump(
		name: nil | string,
		prefix: nil | string,
		mode: nil | Visca.modes[keysof<|Visca.modes|>]
	)
		if name then print("\n" .. name .. ":") end

		prefix = prefix or "- "
		print(string.format("%sMessage:         %s", prefix or "", self:as_string(mode)))
		print(
			string.format(
				"%sPayload type:    %s (0x%02X%02X)",
				prefix or "",
				Visca.payload_type_names[self.payload_type] or "Unkown",
				math.floor(self.payload_type / 256),
				self.payload_type % 256
			)
		)
		print(
			string.format(
				"%sPayload length:  %d",
				prefix or "",
				(self.payload_size > 0) and self.payload_size or #self.payload
			)
		)
		print(string.format("%sSequence number: %d", prefix or "", self.seq_nr))

		if self.message.command then
			print(string.format("%sPayload:         Command", prefix or ""))
			print(string.format("%s                 %s", prefix or "", self.message.command:as_string()))
		elseif self.message.reply then
			print(string.format("%sPayload:         Reply", prefix or ""))
			print(string.format("%s                 %s", prefix or "", self.message.reply:as_string()))
		else
			print(string.format("%sPayload:         %s", prefix or "", tostring(self.payload)))

			for k, v in pairs(self.payload  as {[number] = number}) do
				print(string.format("%sPayload:         - byte %02X: 0x%02X", prefix or "", k, v))
			end
		end

		return self
	end
end

do
	local Transmission = {}
	Transmission.__index = Transmission
	type Transmission.@Self = {
		send = Visca.Message(),
		send_timestamp = nil | string,
		ack = nil | string,
		ack_timestamp = nil | string,
		error = nil | string,
		error_timestamp = nil | string,
		completion = nil | string,
		completion_timestamp = nil | string,
	}

	function Transmission:add_reply(reply)
		if reply.is_ack() then
			self.ack = reply
			self.ack_timestamp = obs.os_gettime_ns()
		elseif reply.is_completion() then
			self.completion = reply
			self.completion_timestamp = obs.os_gettime_ns()
		elseif reply.is_error() then
			self.error = reply
			self.error_timestamp = obs.os_gettime_ns()
		end
	end

	function Transmission:timed_out()
		if not self.send_timestamp then
			return false
		else
			return (obs.os_gettime_ns() - math.max(self.send_timestamp, self.ack or 0)) >
				3000000000 -- 3 seconds in nanoseconds
		end
	end

	function Transmission:is_inquiry()
		return self.send and self.send.is_inquiry() or false
	end

	function Transmission:inquiry_data()
		if self.is_inquiry() and self.completion then
			return self.completion.get_inquiry_data_for(self.send.payload)
		else
			return nil
		end
	end

	function Visca.Transmission(message: mutable Visca.Message())
        return setmetatable( {
			send                 = message,
			send_timestamp       = nil,
			ack                  = nil,  -- received ack message
			ack_timestamp        = nil,  -- received ack timestamp
			error                = nil,  -- received ack message
			error_timestamp      = nil,  -- received ack timestamp
			completion           = nil,  -- recieved completion message
			completion_timestamp = nil,  -- received completion timestamp
		  }, Transmission)
    end


end

do
	local socket = import("./ljsocket.nlua")

	local type { TSocket, AddressInfo } = import<|"./ljsocket.nlua"|>

	local Connection = {}
	Connection.__index = Connection
	type Connection.@Self = {
		sock = TSocket,
		address = AddressInfo,
		mode = Visca.modes[keysof<|Visca.modes|>],
		transmission_queue = List<|Visca.Transmission(Visca.Message())|>,
		callbacks = any,
	}

	local function create_non_blocking_udp_socket(host: string, port: string)
		local address = assert(socket.find_first_address(host, tostring(port)))
		local sock = assert(socket.create("inet", "dgram", "udp"))
		assert(sock:set_blocking(false))
		return sock, address
	end

	function Visca.connect(address: string, port: nil | number)
		if not port or (port < 1) or (port > 65535) then port = Visca.default_port end

		local ok, sock, addrinfo = pcall(create_non_blocking_udp_socket, address, tostring(port))

		if not ok then
			return nil, string.format("Unable to connect to %s:%i %s", address, port, err)
		end

		return setmetatable(
			{
				sock = sock  as TSocket,
				address = addrinfo as AddressInfo,
				mode = Visca.modes.generic,
				transmission_queue = {},  -- List of Transmission objects
				callbacks = {},   -- List of callbacks: [type][id] = function
			},
			Connection
		)
	end

    function Connection:_transmit(message)
        local data_to_send = message.to_data(self.mode)
        local sock = self.sock

        if Visca.debug then
            print(string.format("Connection transmit %s", message.as_string(self.mode)))
            message.dump(nil, nil, self.mode)
        end

        if sock ~= nil then
            return sock:send_to(self.address, data_to_send), data_to_send
        else
            return 0, data_to_send
        end
    end

    function Connection:_transmissions_add_message(msg)
        local found = false
        local transmission = nil

        for _,t in pairs(self.transmission_queue) do
            if self.mode == Visca.modes.generic then
                if t.send.seq_nr == msg.seq_nr then
                    found = true
                end
            elseif self.mode == Visca.modes.ptzoptics then
                -- The response does not have a header, so we don't know the sequence number
                -- Let's just assume it belongs to the first message in the queue
                found = true
            end

            if found then
                t.add_reply(msg.message.reply)
                transmission = t
                break
            end
        end

        return transmission
    end

    function Connection:_transmissions_process()
        local transmit_size = 0
        local transmit_data = nil

        for i,t in pairs(self.transmission_queue) do
            if t.timed_out() then
                self._exec_callback('timeout', t)
                t = nil
            elseif t.error or t.completion then
                -- Message transaction completed, remove from queue
                t = nil
            end

            if not t then
                self.transmission_queue[i] = nil
            end
        end

        for _,t in pairs(self.transmission_queue) do
            -- Check if the first remaining message still needs transmission
            if t then
                if not t.send_timestamp then
                    transmit_size, transmit_data = self._transmit(t.send)
                    t.send_timestamp = obs.os_gettime_ns()
                end
                break
            end
        end

        return transmit_size, transmit_data
    end


	function Connection:set_mode(mode: Visca.modes[keysof<|Visca.modes|>])
		self.mode = mode
		return true
	end

	function Connection:close()
		if self.sock then return end

		self.sock:close()
		self.sock.sock = nil

		if #self.transmission_queue > 0 then
            print(string.format("Warning: %d unfinished messages in queue", #connection.transmission_queue))
        end
	end

	function Connection:send(message: mutable Visca.Message())
		message.seq_nr = (message.seq_nr + 1) % 0xFFFFFFFF

		table.insert(self.transmission_queue, Visca.Transmission(message))
        return self._transmissions_process()
	end

	function Connection:receive()
		local result = {nil, "No connection", 0}

		local sock = self.sock

		if not sock then return nil, "No connection", 0 end

		local data, err, num = sock:receive_from(self.address, 32)

		if not data then return nil, err, num end

		local msg = Visca.Message()
		msg:from_data(data)

		if Visca.debug then
			print(string.format("Received %s", msg.as_string(self.mode)))
		end

		if msg.message.reply then
			local transmission = connection._transmissions_add_message(msg)
			if not transmission then
				print(string.format("Warning: Unable to find send message for reply: %s",
						msg.as_string(connection.mode)))
			end
		end

		pcall(self._transmissions_process)


		return msg
	end

	for action_name, func in pairs(Visca.CameraActions) do
		Connection[action_name] = function(self: Connection.@Self, ...: unpack<|Parameters<|func|>|>)
			return self:send(func(...))
		end
	end
end

return Visca