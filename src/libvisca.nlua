local bit = require("bit")
local socket = import("./ljsocket.nlua")
local Visca = {}
Visca.default_port = 52381
Visca.default_camera_nr = 1
Visca.debug = false
Visca.modes = {generic = 0, ptzoptics = 1}
-- Payload type
-- Stores the value (Byte 0 and Byte 1) of the following table on the payload division
Visca.payload_types = {
	visca_command = 0x0100, -- VISCA command, Stores the VISCA command.
	visca_inquiry = 0x0110, -- VISCA inquiry, Stores the VISCA inquiry.
	visca_reply = 0x0111, -- VISCA reply, Stores the reply for the VISCA command and VISCA inquiry,
	-- or VISCA device setting command.
	visca_setting = 0x0120, -- VISCA device setting command, Stores the VISCA device setting command.
	control_command = 0x0200, -- Control command, Stores the control command.
	control_reply = 0x0201, -- Control reply, Stores the reply for the control command.
}
Visca.payload_type_names = {
	[Visca.payload_types.visca_command] = "VISCA Command",
	[Visca.payload_types.visca_inquiry] = "VISCA Inquiry",
	[Visca.payload_types.visca_reply] = "VISCA Reply",
	[Visca.payload_types.visca_setting] = "VISCA Device Setting Command",
	[Visca.payload_types.control_command] = "Control Comand",
	[Visca.payload_types.control_reply] = "Control Reply",
}
Visca.packet_consts = {
	req_addr_base = 0x80,
	command = 0x01,
	inquiry = 0x09,
	terminator = 0xFF,
}
Visca.error_type_names = {
	[0x01] = "Message length error",
	[0x02] = "Syntax error",
	[0x03] = "Command buffer full",
	[0x04] = "Command canceled",
	[0x05] = "No socket", -- To be cancelled
	[0x41] = "Command not executable",
}
Visca.categories = {
	interface = 0x00,
	camera = 0x04,
	exposure = 0x04,
	focus = 0x04,
	exposure_ext = 0x05,
	pan_tilter = 0x06,
	camera_ext = 0x07,
}
Visca.category_names = {
	[Visca.categories.interface] = "Interface",
	[Visca.categories.camera] = "Exposure/Focus/Camera",
	[Visca.categories.exposure] = "Exposure/Focus/Camera",
	[Visca.categories.focus] = "Exposure/Focus/Camera",
	[Visca.categories.exposure_ext] = "Exposure",
	[Visca.categories.pan_tilter] = "Pan/Tilt",
	[Visca.categories.camera_ext] = "Exposure/Camera",
}
Visca.commands = {
	power = 0x00,
	pantilt_drive = 0x01,
	pantilt_home = 0x04,
	pantilt_reset = 0x05,
	zoom = 0x07,
	focus = 0x08,
	exposure_gain = 0x0C,
	preset = 0x3F,
	zoom_to = 0x47,
	focus_direct = 0x48,
	exposure_auto = 0x49,
	exposure_shutter_direct = 0x4A,
	exposure_iris_direct = 0x4B,
	exposure_gain_direct = 0x4B,
}
Visca.command_names = {
	[Visca.commands.power] = "Power",
	[Visca.commands.pantilt_drive] = "Pan/Tilt",
	[Visca.commands.pantilt_home] = "Pan/Tilt (Home)",
	[Visca.commands.pantilt_reset] = "Pan/Tilt (Reset)",
	[Visca.commands.zoom] = "Zoom",
	[Visca.commands.focus] = "Focus",
	[Visca.commands.exposure_gain] = "Gain",
	[Visca.commands.preset] = "Preset",
	[Visca.commands.zoom_to] = "Zoom (to)",
	[Visca.commands.focus_direct] = "Focus (Direct)",
	[Visca.commands.exposure_auto] = "Auto Exposure",
	[Visca.commands.exposure_iris_direct] = "Iris Absolute",
	[Visca.commands.exposure_shutter_direct] = "Shutter Absolute",
	[Visca.commands.exposure_gain_direct] = "Gain Absolute",
}
Visca.command_arguments = {
	preset_recall = 0x02,
	power_on = 0x02,
	power_standby = 0x03,
	focus_stop = 0x00,
	focus_far_std = 0x02,
	focus_near_std = 0x03,
	focus_far_var = 0x20,
	focus_near_var = 0x30,
}

local function ca_key(command: ref number, argument: ref number)
	return bit.lshift(command or 0, 8) + (argument or 0)
end

Visca.command_argument_names = {
	[ca_key(Visca.commands.preset, Visca.command_arguments.preset_recall)] = "Absolute Position (Preset)",
	[ca_key(Visca.commands.power, Visca.command_arguments.power_on)] = "On",
	[ca_key(Visca.commands.power, Visca.command_arguments.power_standby)] = "Standby",
	[ca_key(Visca.commands.focus, Visca.command_arguments.focus_stop)] = "Stop",
	[ca_key(Visca.commands.focus, Visca.command_arguments.focus_far_std)] = "Far (standard speed)",
	[ca_key(Visca.commands.focus, Visca.command_arguments.focus_near_std)] = "Near (standard speed)",
	[ca_key(Visca.commands.focus, Visca.command_arguments.focus_far_var)] = "Far (variable speed)",
	[ca_key(Visca.commands.focus, Visca.command_arguments.focus_near_var)] = "Near (variable speed)",
}
Visca.Focus_modes = {
	auto = 0x3802,
	manual = 0x3803,
	toggle = 0x3810,
	one_push_trigger = 0x1801,
	infinity = 0x1802,
}
Visca.PanTilt_directions = {
	upleft = 0x0101,
	upright = 0x0201,
	up = 0x0301,
	downleft = 0x0102,
	downright = 0x0202,
	down = 0x0302,
	left = 0x0103,
	right = 0x0203,
	stop = 0x0303,
}
Visca.Zoom_subcommand = {
	stop = 0x00,
	tele_standard = 0x02,
	wide_standard = 0x03,
	tele_variable = 0x20,
	wide_variable = 0x30,
}
Visca.limits = {
	PAN_MIN_SPEED = 0x01,
	PAN_MAX_SPEED = 0x18,
	FOCUS_MIN_SPEED = 0x00,
	FOCUS_MAX_SPEED = 0x07,
	TILT_MIN_SPEED = 0x01,
	TILT_MAX_SPEED = 0x18,
	ZOOM_MIN_SPEED = 0x00,
	ZOOM_MAX_SPEED = 0x07,
	ZOOM_MIN_VALUE = 0x0000,
	ZOOM_MAX_VALUE = 0x4000,
}

-- A Visca message is binary data with a message header (8 bytes) and payload (1 to 16 bytes).
--
-- Byte:                      0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
-- Payload (byte 0-1):        |
-- Payload length (byte 2-3):       |
-- Sequence number (byte 4-7):            |
-- Payload (byte 8 - max 23):                         |
--
-- The wire format is big-endian (LSB first)
function Visca.Message()
	local function message_payload_command()
		local _self = {
			command_inquiry = 0x00  as number,
			category = 0x00  as number,
			command = 0x00  as number,
			arguments = {} as {[number] = number},
		}

		function _self.from_payload(payload: {[number] = number})
			_self.command_inquiry = payload[2]
			_self.category = payload[3] or 0
			_self.command = payload[4] or 0

			for i = 5, #payload do
				if not ((i == #payload) and (payload[i] == Visca.packet_consts.terminator)) then
					table.insert(_self.arguments, payload[i])
				end
			end

			return _self
		end

		function _self.is_command()
			return _self.command_inquiry == 0x01
		end

		function _self.is_inquiry()
			return _self.command_inquiry == 0x09
		end

		function _self.as_string()
			local args = "- (no arguments)"

			if #_self.arguments > 0 then
				local descr = Visca.command_argument_names[ca_key(_self.command, _self.arguments[1])]
				local str_a = {}

				for i = descr and 2 or 1, #_self.arguments do
					table.insert(str_a, string.format("%02X", _self.arguments[i]))
				end

				args = (descr or "arguments") .. " " .. table.concat(str_a, " ")
			end

			if _self.is_command() then
				return string.format(
					"Command on %s: %s, %s",
					Visca.category_names[_self.category],
					Visca.command_names[_self.command] or
						string.format("Unknown (0x%0x)", _self.command),
					args
				)
			elseif _self.is_inquiry() then
				return string.format(
					"Inquiry on %s: %s, %s",
					Visca.category_names[_self.category],
					Visca.command_names[_self.command] or
						string.format("Unknown (0x%0x)", _self.command),
					args
				)
			else
				return "Unknown"
			end
		end

		return _self
	end

	local function message_payload_reply()
		local _self = {msg_type = 0x00  as number, error_type = 0x00  as number}

		function _self.from_payload(payload: {[number] = number})
			_self.msg_type = payload[2]
			_self.error_type = payload[3] or 0
			return _self
		end

		function _self.is_ack()
			return bit.band(_self.msg_type, 0xF0) == 0x40
		end

		function _self.is_completion()
			return bit.band(_self.msg_type, 0xF0) == 0x50
		end

		function _self.as_string()
			if _self.is_ack() then
				return "Acknowledge"
			elseif _self.is_completion() then
				return "Completion"
			else
				return string.format(
					"Error on socket %d: %s",
					bit.band(_self.msg_type, 0x0F),
					Visca.error_type_names[_self.error_type] or "Unknown"
				)
			end
		end

		return _self
	end

	local self = {
		payload_type = 0x0000  as number,
		payload_size = 0x0000  as number,
		seq_nr = 0x00000000  as number,
		payload = {} as {[number] = number}, -- as Payload structure
		message = {} as {
			command = nil | message_payload_command().from_payload({[number] = number}),
			reply = nil | message_payload_reply().from_payload({[number] = number}),
		},
	}

	function self.lsb(v)
		return bit.band(v, 0x00FF)
	end

	function self.msb(v)
		return bit.rshift(v, 8)
	end

	function self.from_data(data: string)
		local message_length = #(data or "")

		if message_length > 1 then
			if
				(
					string.byte(data, 1) == 0x01 or
					string.byte(data, 1) == 0x02
				)
				and
				message_length >= 9 and
				message_length <= 24
			then
				self.payload_type = string.byte(data, 1) * 256 + string.byte(data, 2)
				self.payload_size = string.byte(data, 3) * 256 + string.byte(data, 4)
				self.seq_nr = string.byte(data, 5) * 2 ^ 24 + string.byte(data, 6) * 2 * 16 + string.byte(data, 7) * 2 * 8 + string.byte(data, 8)

				for b = 1, self.payload_size do
					table.insert(self.payload, string.byte(data, 8 + b))
				end
			elseif message_length >= 1 and message_length <= 16 then
				self.payload_size = message_length

				for b = 1, message_length do
					table.insert(self.payload, string.byte(data, b))
				end
			end

			if (bit.band(self.payload[1], 0xF0) == 0x80) then
				-- command or inquiry
				self.message.command = message_payload_command().from_payload(self.payload  as {[number] = number})
			elseif (bit.band(self.payload[1], 0xF0) == 0x90) then
				-- reply
				self.message.reply = message_payload_reply().from_payload(self.payload  as {[number] = number})
			end
		end

		return self
	end

	function self.to_data(mode: nil | Visca.modes[keysof<|Visca.modes|>])
		mode = mode or Visca.modes.generic
		local payload_size = (self.payload_size > 0) and self.payload_size or #self.payload
		local data = {}

		if mode == Visca.modes.generic then
			data = {
				self.msb(self.payload_type),
				self.lsb(self.payload_type),
				self.msb(payload_size),
				self.lsb(payload_size),
				bit.band(bit.rshift(self.seq_nr, 24), 0xFF),
				bit.band(bit.rshift(self.seq_nr, 16), 0xFF),
				bit.band(bit.rshift(self.seq_nr, 8), 0xFF),
				bit.band(self.seq_nr, 0xFF),
			}
		end

		for b = 1, payload_size do
			table.insert(data, self.payload[b])
		end

		local str_a = {}

		for _, v in ipairs(data) do
			table.insert(str_a, string.char(v))
		end

		return table.concat(str_a)
	end

	function self.as_string(mode: nil | Visca.modes[keysof<|Visca.modes|>])
		mode = mode or Visca.modes.generic
		local bin_str = self.to_data(mode)
		local bin_len = #(bin_str or "")
		local str_a = {}

		for b = 1, bin_len do
			table.insert(str_a, string.format("%02X", string.byte(bin_str, b)))
		end

		return table.concat(str_a, " ")
	end

	function self.dump(
		name: nil | string,
		prefix: nil | string,
		mode: nil | Visca.modes[keysof<|Visca.modes|>]
	)
		if name then print("\n" .. name .. ":") end

		prefix = prefix or "- "
		print(string.format("%sMessage:         %s", prefix or "", self.as_string(mode)))
		print(
			string.format(
				"%sPayload type:    %s (0x%02X%02X)",
				prefix or "",
				Visca.payload_type_names[self.payload_type] or "Unkown",
				math.floor(self.payload_type / 256),
				self.payload_type % 256
			)
		)
		print(
			string.format(
				"%sPayload length:  %d",
				prefix or "",
				(self.payload_size > 0) and self.payload_size or #self.payload
			)
		)
		print(string.format("%sSequence number: %d", prefix or "", self.seq_nr))

		if self.message.command then
			print(string.format("%sPayload:         Command", prefix or ""))
			print(string.format("%s                 %s", prefix or "", self.message.command.as_string()))
		elseif self.message.reply then
			print(string.format("%sPayload:         Reply", prefix or ""))
			print(string.format("%s                 %s", prefix or "", self.message.reply.as_string()))
		else
			print(string.format("%sPayload:         %s", prefix or "", self.payload))

			for k, v in pairs(self.payload  as {[number] = number}) do
				print(string.format("%sPayload:         - byte %02X: 0x%02X", prefix or "", k, v))
			end
		end

		return self
	end

	return self
end

local function create_non_blocking_udp_socket(host: string, port: string)
	local address = assert(socket.find_first_address(address, tostring(port)))
	local sock = assert(socket.create("inet", "dgram", "udp"))
	assert(sock:set_blocking(false))
	return sock, address
end

function Visca.connect(address: string, port: number)
	if not port or (port < 1) or (port > 65535) then port = Visca.default_port end

	local ok, sock, addrinfo = pcall(create_non_blocking_udp_socket, address, tostring(port))

	if not ok then
		return nil, string.format("Unable to connect to %s:%i %s", address, port, err)
	end

	local error
	local connection = {
		sock = sock,
		last_seq_nr = 0xFFFFFFFF  as number,
		address = addrinfo,
		mode = Visca.modes.generic,
	}

	local function has_value(tbl: ref Table, value: any)
		for _, v in pairs(tbl) do
			if v == value then return true end
		end

		return false
	end

	function connection.set_mode(mode: Visca.modes[keysof<|Visca.modes|>])
		if has_value(Visca.modes, mode or Visca.modes.generic) then
			connection.mode = mode
			return true
		else
			return false
		end
	end

	function connection.close()
		local sock = connection.sock

		if sock ~= nil then
			sock:close()
			connection.sock = nil
		end
	end

	function connection.send(message)
		if connection.last_seq_nr < 0xFFFFFFFF then
			connection.last_seq_nr = connection.last_seq_nr + 1
		else
			connection.last_seq_nr = 0
		end

		message.seq_nr = connection.last_seq_nr

		if Visca.debug then
			print(string.format("Connection send %s", message.as_string(connection.mode)))
			message.dump(nil, nil, connection.mode)
		end

		local data_to_send = message.to_data(connection.mode)
		local sock = connection.sock

		if sock ~= nil then
			return sock:send_to(connection.address, data_to_send), data_to_send
		else
			return 0, data_to_send
		end
	end

	function connection.await_ack_for(message) end

	function connection.await_completion_for(message) end

	function connection.Cam_Focus_Mode(mode: Visca.Focus_modes[keysof<|Visca.Focus_modes|>])
		if has_value(Visca.Focus_modes, mode) then
			local msg = Visca.Message()
			msg.payload_type = Visca.payload_types.visca_command
			msg.payload = {
				Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
				Visca.packet_consts.command,
				Visca.categories.focus,
				bit.band(bit.rshift(mode, 8), 0xFF),
				bit.band(mode, 0xFF),
				Visca.packet_consts.terminator,
			}
			return connection.send(msg)
		else
			if Visca.debug then
				print(string.format("Cam_Focus_Mode invalid mode (0x%04x)", mode or 0))
			end

			return 0
		end
	end

	function connection.Cam_Focus_Stop()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.focus,
			Visca.commands.focus,
			Visca.command_arguments.focus_stop,
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_Focus_Far(speed: nil | Visca.limits.FOCUS_MIN_SPEED .. Visca.limits.FOCUS_MAX_SPEED)
		speed = speed or Visca.command_arguments.focus_far_std
		speed = math.min(math.max(speed, Visca.limits.FOCUS_MIN_SPEED), Visca.limits.FOCUS_MAX_SPEED)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.focus,
			Visca.commands.focus,
			bit.bor(Visca.command_arguments.focus_far_var, bit.band(speed, 0x07)),
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_Focus_Near(speed: nil | Visca.limits.FOCUS_MIN_SPEED .. Visca.limits.FOCUS_MAX_SPEED)
		speed = speed or Visca.command_arguments.focus_near_std
		speed = math.min(math.max(speed, Visca.limits.FOCUS_MIN_SPEED), Visca.limits.FOCUS_MAX_SPEED)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.focus,
			Visca.commands.focus,
			bit.bor(Visca.command_arguments.focus_near_var, bit.band(speed, 0x07)),
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_Power(on: boolean)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.power,
			on and
			Visca.command_arguments.power_on or
			Visca.command_arguments.power_standby,
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_Preset_Recall(preset: 0 .. 127)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.preset,
			Visca.command_arguments.preset_recall,
			bit.band(preset, 0x7F), -- Preset Number(=0 to 127)
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_PanTilt(
		direction: Visca.PanTilt_directions[keysof<|Visca.PanTilt_directions|>],
		pan_speed: nil | (Visca.limits.PAN_MIN_SPEED .. Visca.limits.PAN_MAX_SPEED),
		tilt_speed: nil | (Visca.limits.TILT_MIN_SPEED .. Visca.limits.TILT_MAX_SPEED)
	)
		if
			not has_value(Visca.PanTilt_directions, direction or Visca.PanTilt_directions.stop)
		then
			if Visca.debug then
				print(string.format("Cam_PanTilt invalid direction (%d)", direction))
			end

			return 0
		end

		pan_speed = math.min(math.max(pan_speed or 1, Visca.limits.PAN_MIN_SPEED), Visca.limits.PAN_MAX_SPEED)
		tilt_speed = math.min(math.max(tilt_speed or 1, Visca.limits.TILT_MIN_SPEED), Visca.limits.TILT_MAX_SPEED)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.pan_tilter,
			Visca.commands.pantilt_drive,
			bit.band(pan_speed, 0x1F), -- lowest 5 bits are only relevant
			bit.band(tilt_speed, 0x1F), -- lowest 5 bits are only relevant
			bit.band(bit.rshift(direction, 8), 0xFF),
			bit.band(direction, 0xFF),
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_PanTilt_Home()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.pan_tilter,
			Visca.commands.pantilt_home,
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_PanTilt_Reset()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.pan_tilter,
			Visca.commands.pantilt_reset,
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_Zoom_Stop()
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.zoom,
			Visca.Zoom_subcommand.stop,
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_Zoom_Tele(speed: nil | Visca.limits.ZOOM_MIN_SPEED .. Visca.limits.ZOOM_MAX_SPEED)
		speed = speed or Visca.Zoom_subcommand.tele_standard
		speed = math.min(math.max(speed, Visca.limits.ZOOM_MIN_SPEED), Visca.limits.ZOOM_MAX_SPEED)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.zoom,
			bit.bor(Visca.Zoom_subcommand.tele_variable, bit.band(speed, 0x07)),
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_Zoom_Wide(speed: nil | Visca.limits.ZOOM_MIN_SPEED .. Visca.limits.ZOOM_MAX_SPEED)
		speed = speed or Visca.Zoom_subcommand.wide_standard
		speed = math.min(math.max(speed, Visca.limits.ZOOM_MIN_SPEED), Visca.limits.ZOOM_MAX_SPEED)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.zoom,
			bit.bor(Visca.Zoom_subcommand.wide_variable, bit.band(speed, 0x07)),
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	function connection.Cam_Zoom_To(zoom: nil | Visca.limits.ZOOM_MIN_VALUE .. Visca.limits.ZOOM_MAX_VALUE)
		zoom = zoom or 0
		zoom = math.min(math.max(zoom, Visca.limits.ZOOM_MIN_VALUE), Visca.limits.ZOOM_MAX_VALUE)
		local msg = Visca.Message()
		msg.payload_type = Visca.payload_types.visca_command
		msg.payload = {
			Visca.packet_consts.req_addr_base + bit.band(Visca.default_camera_nr or 1, 0x0F),
			Visca.packet_consts.command,
			Visca.categories.camera,
			Visca.commands.zoom_to,
			bit.band(bit.rshift(zoom, 12), 0x0F),
			bit.band(bit.rshift(zoom, 8), 0x0F),
			bit.band(bit.rshift(zoom, 4), 0x0F),
			bit.band(zoom, 0x0F),
			Visca.packet_consts.terminator,
		}
		return connection.send(msg)
	end

	if connection.sock then return connection else return nil, error end
end

return Visca